ぴゅんぴゅん3号
プチ・シンセの作り方

はじめに

鍵盤を弾けなくてもツマミを回したりボタンを押しただけで「いい感じ」の音が出てくる。

これがぴゅんぴゅん3号の目標です。


  ぴゅんぴゅんマシンとは
  
最近はもうすっかり話題にものぼらなくなった気もしますが「初音ミク」が発売される少し前、若い子に「どんな音楽聴いてる？」と聞くとレゲエ！とかトランス！とか割とちゃんとした答えが返ってきました。

レゲエと言ってもおっさん世代はボブ・マーリーで止まっていたわけでよくわからなかったのですが、貸してもらったCDのコンピレーションアルバムに
2ちゃんねるでたまたま見かけて気になっていた「ぴゅんぴゅんマシーン」の音が入っていました。

「ぴゅんぴゅんマシーン」とは言葉で説明すると難しいのですが、「ぴゅ～ん」とか「ぴゅんぴゅんぴゅんぴゅん」とか、とてもなさけない音がする「電子楽器」です。

海外では「Siren Machine」と呼ばれているようです。

原理としては、オシレーターで発生させる波形にLFOで周波数変調を掛けるというもので、ミニマルなシンセサイザーと言えるかもしれません。

エロゲ会社で仕事をさぼりながらDTMソフトの「Fruity Loops」や「Acid Music」でループ・ミュージックを作っていた身にとっては「ぴゅんぴゅんマシーン」は大ヒットでした。

ぴゅんぴゅんマシーンが欲しくなってネットで調べると売っているけど、めちゃ高いではないか！

自作しようと思って探してもぴったり来る解説や回路図が全然見つからない！！

似たような音はがんばれば出せるかもしれないので、一から自分で作ってみようかな、というのがそもそもの動機でした


フル・ディスクリートで作ったぴゅんぴゅん1号

[画像]

トランジスタ回路で作成しました。「太い」音がします。


Arduinoで作ったぴゅんぴゅん2号

[画像]

パラメーターをいじっていろいろな音を出せることを目標に作成しました。

ぴゅんぴゅん1号と2号については、去年の夏コミで頒布した「はじめてのぴゅんぴゅんマシン」で紹介しています。

https://github.com/ryood/C86


  
PSoCとは

ぴゅんぴゅん3号は、PSoCベースで作ることにしました。

PSoCとはCyPress社が出しているマイコン＋プログラム可能なデジタル・ブロックとアナログ・ブロックという構成のなかなか変態なIC（マイコン？）です。

シリーズとしては、PSoC1、PSoC3、PSoC4、PSoC5LPとあり、それぞれ特徴がありますが、2～3年ぐらい前に「PSoC 4 Pioneer Kit」という開発ボードが発売されました。

[画像]

このボードの最大の特徴は２つ。

Arduino互換のソケットが出ているのでArduinoのシールドが使えて

ARM（32bit CPU）のパワーの恩恵に預かれる

という点です。

コアはARMのCortex-M0で、デジタル・ブロックやアナログ・ブロックを自分好みにカスタマイズして使える。

これは使わない手はないなと思って、ぴゅんぴゅん3号は「PSoC 4 Pioneer Kit」で製作しました。



PSoC 4 Pioneer Kitを使ってみる

インストール方法
  
必要環境：
  PSoC 4 Pioneer Kit
  Windowsの動くパソコン
  
まずは「PSoC 4 Pioneer Kit」を購入。3000円ぐらいです。Arduino Unoと同じぐらいの値段です。

「PSoC 4 Prototyping Kit」という600円ぐらいで売っているものもあって、これはこれでコスパが高いのですが、ドキュメントがいまいちなので少し敷居が高いです。

楽をしたいなら「Pioneer Kit」です。

PSoCの開発にはCypressから無償で提供されている「PSoC Creator」が必要です。

「PSoC 4 Pioneer Kit」の箱に書いてあるとおり

www.cypress.com/go/CY8CKIT-042

にアクセスして

CY8CKIT-042 Kit Setup 

をダウンロードしてインストールします。

※途中でCYPRESSのアカウントの作成を要求されたり、「Akamai NetSession Interface」のインストールを要求されますが従いましょう。

インストール後しばらくして（数日後かも）、「Cypress Update Manager」が起動してUpdateを促されると思いますが、ドキュメントと機能が乖離するので、わからなければ慣れるまでUpdateはキャンセルしておいた方が無難だと思います。



音を作る
  デジタル回路にはDDSがいちばん？
  
デジタル的に波形（音）を生成する方法はいろいろありますが、ぴゅんぴゅん3号ではDDS（Direct Digital Synthesizer）という手法をとっています。

メリットは演算量が非常に少ないという点です。

「楽器」として使うならリアルタイムに波形を生成しないといけないので複雑な演算をしていては波形生成が追いつかなくなります。


[DDSの図]


図としては複雑そうに見えますが、あらかじめ周波数を「tuningWord」に変換したり、「waveTable」をメモリ上に準備しておけば、周波数を指定して波形を簡単に生成できます。

	// Caluclate Wave Value
	//
	phaseRegister += tuningWord;

	// 32bitのphaseRegisterをテーブルの10bit(1024個)に丸める
	index = phaseRegister >> 22;
    waveValue = *(waveTables[waveShape] + index);

計算して出てきた「waveValue」は出力波形の電位のデジタル値なので、DACでアナログ値の電位に変換すれば「音」として扱える様になります。



  LFOについて
  
「Low Frequency Ocillator」の略で日本語に訳すと「低周波発振器」という意味になります。

LFOと言われても「別に普通のオシレーターでいいやん？！」と思ってましたが、1つの発振回路構成で可聴帯域の発振と、可聴帯域以下（0.1Hz～10Hzあたり）の発振を担わせようと思うと困難な問題に直面することがあります。

アナログ回路だとCR発振器のC（コンデンサ）の値の取り方でまともに発振してくれるR（可変抵抗器）の値の範囲が決まります。

[アナログCR発振回路　回路図！！！！！！]

デジタル回路でも1回で計算できる桁数は固定なので、ムリをすると破綻してめちゃくちゃな計算結果が出てくることになります。

なので、「聴こえる周波数」と「うねりを作る周波数」を分けて回路やプログラムを作ってやればいいのでは？

ということで低周波専用の発振器が登場することになります。

DDSなら簡単で、tuningWordを算出するときのサンプリング・レートを下げてやればLFOは実現できます。


DDSの最低出力周波数は

  f_out = (tuningWord / 2 ^ n) * SAMPLING_RATE;
  （f_out: 出力周波数, n: tuningWordのビット長）
  
で求まります。

(tuningWord / 2 ^ n)が負の値を取ると出力周波数が負の値になっておかしなことになります。



tuningWordは整数なので、tunigWordを0以上の整数の最小値とすると

tuningWord = 1

となり

16bit演算で、CDと一緒の44.1kHzの場合で考えると、SAMPLING_RATE = 44,100, n = 16なので

  f_out = (1 / 2　^　16) * 44100 = 0.673[Hz]
  
となります。

つまり16bit演算でサンプリング・レートが44.1kHzだと0.673Hz以下の周波数は生成できないということになります。


サンプリング・レートを1/10の4410Hzに下げてやれば

  f_out = (1 / 2　^　16) * 4410 = 0.0673[Hz]

まで生成できることになります。

たかだか1/10ですが、「桁足らず？」で演算できなくなるのをフォローするためにはしかたないと思います。

PSoC4は32bitのCPUなのでそれ程厳密に考えなくていいと思いますが
小数点演算が出てくるので計算量を減らすためにもぴゅんぴゅん3号ではWave系とLFO系の2系統に分けて演算しています。


  
PSoC 4 Pioneer Kitでプログラミング

コンポーネントの使い方

[TopDesignの図]

PSoCのプログラミング方法は普通のマイコンとは少し違います。

コンポーネントと呼ばれるパーツを組み合わせて普通のマイコンに備わっている周辺機能や、PLDのデジタル回路みたいなものを定義してやります。

オブジェクト指向で使うUML図やデジタル回路のシンボルのようにグラフィカルに定義できるので、プログラム言語で記述するよりもパッと見た感じ把握しやすいと思います。

各コンポーネントをダブルクリックすると「Configure」というダイアログが現れてコンポーネントの機能の詳細を設定できます。

コンポーネントの使い方を習得するのがPSoCを使う上で重要事項になります。


ぴゅんぴゅん3号で使ったコンポーネント

    TimerCounter

いわゆるTimerです。正確な間隔で割込みをかけるモジュールです。

このタイミングを利用してDDSのサンプリングを行っています。

やっていることは12MHzのクロックを受けて、250/65535で分周しているので

12(MHz) * (250 / 65535) = だいたい45.777(kHz)

あ！やばい！ プログラムのサンプリング・レートと合っていない！

まあいいか（笑）

このコンポーネントは波形を生成する大事なクロックを司っているのですが、バグも音の味ということで、そのうちちゃんと直したいと思います。

	
    IDAC

電流出力型のDAC（Digital / Analog Converter)のコンポーネントです。プログラムで生成した波形をアナログ値に変換するために使用しています。

普通のDACは電圧出力型ですが、PSoC4には電流出力型のものしか用意されていません。

電流出力型と言われて最初びびりましたが、電流値を電圧に変換すればいいだけの話なので基本的には抵抗1本でできます。

[I-V変換の図]

Vo = I * R

なのでRの値で出力電圧を設定できます。

ただ、このままでは後段の回路と干渉するので何か対策する必要があります。

PSoC4のIDACの精度は7bitか8bitで出力電流は「0-306uA」か「0-612uA」を選べるようになっています。

    I2C
パラメーターを表示するLCDとの通信に使いました。

LCDはHD44780という規格がよく使われていて製作例も多いので使いやすいのですが、接続がパラレルなのでマイコンから出ているPINをたくさん使ってしまうのが難点です。

また、サイズの小さいものもあまり見かけません。

ぴゅんぴゅん3号はAruduinoシールドとして実装するため線数が少なくて済んでサイズの小さいものもあるI2CのLCDを使うことにしました。

バックライトは暗いところでも視認できるという意味で必須です。

16桁2行、バックライト付でできるだけサイズの小さいものということでaitendoの「SPLC792-I2C-M」を使いました。

[SPLC792-I2C-Mの画像]

このLCDは375円と値段もかなりお手頃なのですが、通販だと1回に2個しか買えません。また、ちょいちょい売り切れます。（なぜだか割と早めに補充される）

同じLCDモジュールと基板のセットで自分ではんだ付けしないといけないものもありますが、はんだ付けに自信がある人は別として「SPLC792-I2C-M」が使いやすいと思います。

「SPLC792-I2C-M」もピンヘッダのほか多少はんだ付けしないといけないので使い方はBlogの記事を参照してください。

aitendoのSPLC792-I2CをArduinoで使う方法 http://dad8893.blogspot.jp/2015/02/aitendosplc792-i2carduino.html


PSoC4ではI2C LCD用のコンポーネントもありますが「SPLC792-I2C-M」はそのままでは使えない様なので、「I2Cの素」のコンポーネントを使いました。

PSoC4では「I2C(SCB mode)」というコンポーネントになります。

I2Cコンポーネントの設定は「Data rate」ぐらいしかないので100kbpsにしました。

    ADC
	
ADCはパラメーター設定用の可変抵抗の値を読み取るのに使用しています。

PSoC4で使えるコンポーネント名は「Sequecing SAR ADC」です。

実は今回使ったコンポーネントの設定でADCが一番把握するのに苦労しました。

[ADCのConfigure Dialogの図]

ADCの入力は8個まで使えますが、実態はADCは1個しかなく順次処理をしています。なので使っている入力チャネルの数で処理が分配されて入力チャネルが増えると処理能力が落ちます。

ダイアログの左上の「Timing」の「Clock frequency」は8000kHz（8MHz)を指定していますが、分配した結果としてそれぞれのチャネルで2314サンプル/秒の処理ができますよ、ということになります。


「Input range」の「Vref select」は基準とする上側の電圧で、「VDDA」（アナログのVDD）を指定しているので今回は（だいたい）3.3Vになります。

「Single ended negative input」は下側で「Vss」なのでGNDレベルになります。

なので可変抵抗の両端にそれぞれ0V、3.3Vを与えればADCでちょうどいい変換ができるということになります。

「Interrupt limits」は、割り込みの閾値の設定で、今回はADCの割込みを使っていないので関係ありません。

「Clock Source」は「*.cydwr」の「Clock」タブでADCに設定した値を使うかTopDesignで外部から明示的に与えるかの選択です。

「Sample mode」はハードウェアでADCを起動するかどうかの選択ですが、今回はソフト的にADCの動作を制御しているのでどちらでもかまいません。

「Result data format」は実際に可変抵抗を操作しながら設定値を決めました。

[channelsタブの図]

「channels」タブの設定値も同様に試行錯誤の結果です。



    Debouncer

物理的なスイッチはON/OFFの切り替え時に値が安定しない時間があります。チャタリングと呼びます。

これを回避する方法はソフト的なものやハード的なものいろいろありますが、PSoCでは「Debouncer」コンポーネントを使えばデジタル・ブロックで回避できるので使ってみました。

CPU（プログラム）と関係なく動作して外付けの回路も一切不要なので、今回PSoCのありがたみを一番感じられたコンポーネントです。

	
割り込みとポーリング

フィジカル・コンピューティングでは割込みで処理することがほとんどだと思います。

外部のデバイスから何かアラートが上がった時にそれに対する処理をするというのが基本になると思います。

ぴゅんぴゅん3号も最初は全部割り込みで処理する様にプログラムしましたが、割込みが重なると問題が発生しました。

ぴゅんぴゅん3号は基本的に波形生成マシンです。

そこにパラメーター設定用のADCの割込みがかかると波形が崩れました。

[波形崩れの図]

割り込みの優先順位を設定するという手もありそうですが、そもそも可変抵抗によるパラメーター設定は波形生成に比べるとそれほど優先順位が高くありません。

入力のレスポンスが悪化しますが、波形生成のタイミングだけ割込み処理にして、他の処理はポーリングで処理することにしました。

ポーリングとはプログラムで明示的に外部デバイスに状態を問い合わせる処理です。

こうすると入力の受付は、波形生成のための割込み処理より確実に後回しにされるので、結果として波形の崩れは起こらなくなりました。




アナログ回路を作る

  LPF
PSoCのIDACは8bitです。

[8bit出力の波形図]

オシロで見ると波形がガタガタです。このまま出力しても面白ノイズが出るのですが、少しはまともな波形を出力することを考えました。

このガタガタをならすためにはLPF（ローパス・フィルター）を通すといい。

波形を見ると全体的には正弦波ですが、ガタガタのところを見ると矩形波的です。矩形波というのは基本波に奇数次の倍音を弱めながら加えていけばできるそうです。

数学的に言うとテイラー級数で表現できるそうです。


テイラー級数



逆に言うと基本波より上の倍音をカットすれば矩形波はならされるので、ガタガタは除去されます。

決め打ちした周波数の正弦波ならその周波数より上をカットしてやればいいのですが、ピュンピュン3号の基本波の周波数はツマミでいじくります。

基本波に合わせてカットオフ周波数周波数を変化させるのは大変だし、「聴いてみていい感じ」を目標にしているのでスパッと切れば良いわけでないので配分がなかなか難しい。

デジタル的な歪も気持ち良ければある程度残したい。

というわけで、回路の定数（抵抗やコンデンサーの値）を後で調整できるように「ピンソケット」を使って抵抗やコンデンサーを差し替えられるようにして実装しました。

[ぴゅんぴゅん3号の図]


  出力バッファ
  
IDACの電流出力を抵抗で電圧に変換しましたが、そのままではまともに出力できないのでバッファを入れました。

例えて言うと、エレキギターの出力をそのままヘッドホンにつないでもまともに音が出ないようなものだと思います。

（オーディオ系の）アナログ回路で言うバッファとは入力インピーダンスが高くて出力インピーダンスが低い回路を言います。

入力インピーダンスが高いので前段の回路が弱っちくても平気、出力インピーダンスが低いので後段の回路が弱っちくても平気という回路です。

こうすると前段と後段の回路を分離して別々に考えられるようになります。

いいことばかりではなく、波形がなまるしノイズも増えるし基板の設計もしんどくなるので理屈に頼って使いすぎると痛い目にあいます。

ぴゅんぴゅん3号では3次VCVSという回路（18dB/oct）でバッファとLPFを一緒にしました。


  Arduinoシールド（BOMと回路図と基板図）
  
[シールドの回路図]

[シールドの基板図]



  出力波形

LFOをかけない状態で出力波形をオシロで見てみました
  
[出力波形の図]



音を出して遊ぶ

これで音を出す準備はできました。

これだけでも「音」は出ます。でも、音が出ただけでは何が面白いのかわかりません。

自分で音を操るのがシンセサイザーの醍醐味です。

鍵盤を弾けなくてもツマミを回したりボタンを押しただけで「いい感じ」の音が出てくる。

これがぴゅんぴゅん3号の目標です。


ぴゅんぴゅんコントローラー
  
  [ぴゅんぴゅんコントローラーの画像]
  
  可変抵抗が3個、ボタンが2個という構成です。可変抵抗の動作としては
  
  ←基本波の周波数 ｜ LFOの周波数 ｜ LFOの深さ→
  
  です。
  
  ボタンは基本波とLFOの波形の切り替えに使っています。
  
「初音ミク」がはやる前AKAIのMPCというPADが4×4で並んだ楽器がありました。

[MPCの画像]

見た感じ簡単に「いい感じ」のグルーブを作れそう～！

ということで買ってはみたものの、まったく使えませんでした。

使えないというのは簡単には使いこなせないということです。肉体的な鍛錬が必要なのでした。

しかも、リズム系ではがんばれば使えそうだけど、飛び道具的な使い方はまったく期待できそうにありませんでした

なので単純に音をアナログ的に操れるデバイスが欲しくなって、可変抵抗を3個とタクトスイッチを2個並べたぴゅんぴゅんコントローラー（1号）を作成しました

簡単に音を操るという意味ではこれはこれでなかなか使いやすいと思っています


ぴゅんぴゅんコントローラー2号

ジョイスティックをつけてボタンを増やしてみました

[pyun2con2の画像]


  おわりに

  波形の増やし方
  
  波形データーは<wavetable.h>で定義してあります。値は12bit(0 - 4095)で1サイクルで1024個です。
  
  ここに値（配列）を追加してやると扱える波形を増やせます。
  
  基本的な波形、「正弦波」、「三角波」、「矩形波」、「ノコギリ波」を定義してありますが、12bitで1024個なら定義してプログラムで扱えるようになります。
  
  自分で録音したりSampling CDから抜き出した音を使いたくなってどうすればいいのか考えてみました。
  
  波形編集ソフト
  
  最近はGoldWaveというソフトを使っています。波形編集というと「Sound Forge」とか「Wavelab」が有名ですがUIのダサさに我慢できればGoldWaveは使えます。
  
  
  波形を整形する
  
  TR-808のcongaの音を加工することにします。
  
  GoldWave-conga-01.png
  
  ステータスバーを見ると「0 to 15,473 smp」とあるので1024個におさえるためには10分の1に圧縮する必要あります。
  
  まずは、余韻みたいなところをカットしてみます
  
  GoldWave-conga-02.png
  
  6,626smpに切り詰められました。
  
  ステータスバーを見ると
  
  Wave(oblolete)PCM signed 24bit, 44100Hz, 1058kbs, mono
  
  となっています。
  
  サンプリングレートが44100Hzということなので、ぴゅんぴゅん3号のWave系で「1Hz」で再生するとちょうどぴったりで再生されるということです。
  
  サンプリング数を1024にするためにサンプリングレートを下げてみます。
  
  6626 / 1024 = だいたい6.47
  
  なので、サンプリングレートを1/7程度にすることを考えてみます。
  
  44,100 / 7 = 6300
  
  キリがいいところで6000（Hz）にしてみます。
  
  GoldWave-conga-03.png
  
 サンプル数が1024になるように範囲を設定します。
  
  GoldWave-conga-04.png
  
メニューバーから「Edit」-「Trim」でサンプル数が1024個の波形にします。

　　GoldWave-conga-05.png

これを12bitで出力したいのですが、バイナリだと後の処理がめんどくさいので16bitのテキスト形式で出力させてみます。

「File」-「Save As」で表示されるダイアログで「ファイルの種類」で「Raw(*.snd)」を選択します。

ダイアログの「Set Attribute...」ボタンを押して「ASCII 16bit integer, mono」を選択して「OK」を押します。

「Save Sound As」ダイアログに戻ると思うので、「保存」ボタンを押せば16bit、1024個の波形がテキスト形式で保存されます。

[波形のテキストの図]

テキスト形式なのであとはExcelとかで編集して12bitのテーブルに変換してやれば<wavetable.h>に埋め込めます。

ぴゅんぴゅん3号はバグがいっぱいあるので、取り込む波形やアナログ回路の作りこみ次第で変な音がいろいろ出てきます。

いじって楽しんでください（＾ｑ＾／




